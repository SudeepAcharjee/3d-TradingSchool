import * as THREE from 'three';
export declare const CubeUVReflectionMapping = 306;
export declare enum NodeToyCullMode {
    Front = "front",
    Back = "back",
    None = "none"
}
export declare enum NodeToyMaterialType {
    Standard = "standard",
    Physical = "physical",
    Unlit = "unlit",
    Image = "image"
}
export declare enum NodeToyRenderType {
    Opaque = "opaque",
    Transparent = "transparent"
}
export interface NodeToyMaterialData {
    version: number;
    uniforms: any[];
    vertex: string;
    fragment: string;
    cullMode: NodeToyCullMode;
    lightModel: NodeToyMaterialType;
    renderType: NodeToyRenderType;
}
export interface NodeToyMaterialOptions {
    url?: string;
    data?: NodeToyMaterialData;
    parameters?: any;
    toneMapped?: boolean;
    flatShading?: boolean;
    transparent?: boolean;
    cullMode?: NodeToyCullMode;
    verbose?: boolean;
    polygonOffset?: boolean;
    polygonOffsetFactor?: number;
    depthTest?: boolean;
    depthWrite?: boolean;
    envMapIntensity?: number;
}
declare class NodeToyMaterial extends THREE.ShaderMaterial {
    verbose: boolean;
    static tick(): void;
    constructor(options?: NodeToyMaterialOptions);
    get cullMode(): NodeToyCullMode;
    set cullMode(value: NodeToyCullMode);
    recompile(): void;
    clone(): this;
    copy(source: NodeToyMaterial): this;
    get url(): any;
    set url(value: any);
    get data(): any;
    set data(value: any);
    get parameters(): Record<string, any>;
    set parameters(value: Record<string, any>);
    private updateUniforms;
    private loadShader;
    private onBeforeRender;
    resetUniformByName: (name: string) => void;
    resetUniformsByName: (names: string[]) => void;
    private getTHREECullMode;
    private static _bindDOMEvents;
    private _fullURL;
    private _url;
    private _data;
    private _parameters;
    private _cullMode;
    private _type;
    private _options;
    private _envUUID;
    private static _time;
    private static _clock;
}
export { NodeToyMaterial };
